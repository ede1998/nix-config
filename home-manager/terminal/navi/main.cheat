% Shell configuration

$ nix_config: echo /home/erik/nix-config

# Edit my cheat sheet
nvim <nix_config>/home-manager/terminal/navi/main.cheat

# Edit starship.toml
nvim <nix_config>/home-manager/terminal/starship.nix

# Reload bashrc
source ~/.bashrc

; Filter symlink and only shows those that go into the nix store
$ symlink: fd . ~/{.config,.local/share} --exclude "Steam" --exclude "Trash" --type symlink --exec sh -c 'realpath "{}" 2> /dev/null | rg -q "^/nix/store/.*$" && echo "{}"'
# Temporarily replace a home-manager symlink with a copy of that file for quick testing
( HOME_MANAGER_REPLACED_FILE=$(realpath "<symlink>"); rip "<symlink>" && cp --no-preserve=mode "$HOME_MANAGER_REPLACED_FILE" "<symlink>"; )
$ file: fd . ~/{.config,.local/share} --exclude "Steam" --exclude "Trash" --type file
; Need to restore the correct symlink target which is in itself a symlink so realpath on the entire path does not work as it expands too much
# Restore temporarily replaced home-manager file with symlink again
( HOME_MANAGER_RESTORE_SOURCE="$(realpath "$HOME/.local/state/home-manager/gcroots/current-home/home-files")/$(realpath "<file>" | sed "s:^$HOME/\?::")"; rip "<file>"; ln -s "$HOME_MANAGER_RESTORE_SOURCE" "<file>"; )

# Format all non-ignored nix files in the repo
git ls-files --cached --others --exclude-standard | rg '\.nix$' | xargs nix fmt

# List available Visual Studio Code/VSCodium extensions in nix flake with extra extensions and make them searchable with fzf.
nix eval --apply '
extensions:
let
  namespaces = builtins.attrNames extensions;
in
builtins.concatLists
  (builtins.map
  (ns: builtins.map
       (ext: "${ns}.${ext}")
       (builtins.attrNames extensions.${ns})
  )
  namespaces)' .#homeConfigurations.erik@babbage.pkgs.vscode-marketplace --json | jq --raw-output '.[]' | fzf --sync | wl-copy

% Ubuntu / Gnome

$ extension_zip: ls *.shell-extension.zip
$ configurable_extension: gnome-extensions list --prefs

# Install the given gnome extension. Download from https://extensions.gnome.org with version `gnome-extensions version`.
gnome-extensions install <extension_zip>

# Restart gnome desktop / window manager
gnome-shell --replace

# Check if user extensions are inactive (might be displayed in INITIALIZED state)
gsettings get org.gnome.shell disable-user-extensions

# Display/show all shell extensions and their state
gnome-extensions list --details

# Show settings dialog of extension
gnome-extensions prefs <configurable_extension>

# add secret to default keyring
secret-tool store -l <display_name> hee1st:id <unique_personal_id>

# display secret from default keyring
secret-tool lookup hee1st:id <unique_personal_id>

# print owner deb package of file
dpkg-query -S <file>

# show info about installed apt/deb package
dpkg -s <pkg>

$ pkg_file: fd --type f --extension deb
# unpack files from an apt package into the given directory
dpkg-deb --extract <pkg_file> <directory>
# pack/build a apt package from the given directory
dpkg-deb --build <directory>

$ package: apt list --- --map "sed 's-/.*--'"
# download the given debian package
apt download <package>

# mount external hdd
gio mount -d 'E6A6-B8AA' /run/media/erik/Backup-HDD

# unmount external hdd
gio mount -u /run/media/erik/Backup-HDD/

% Commands - General

$ file: fd --type f
$ pdf_file: fd --type file --extension pdf

# restart the network manager, e.g. if wifi does not connect after enabling
sudo systemctl restart NetworkManager

# Print full path for file
realpath <file>

; list keys -> keep only keys and the associated name -> merge those in 1 line for each pair -> remove redundant chars
$ key: ( if command -v gpg; then CMD=gpg; else CMD='nix shell nixpkgs#gnupg -c gpg'; fi; $CMD --list-keys ) | rg "(^      [A-Z0-9]{40}$|^uid)" | sed 'N;s/\n/ /;' | sed 's/      //;s/uid           //' --- --map "cut -b -40"

# Export GPG key to clipboard for github, bitbucket etc.
( if command -v gpg; then CMD=gpg; else CMD='nix shell nixpkgs#gnupg -c gpg'; fi; $CMD --armor --export "<key>" ) | if [ "$XDG_SESSION_TYPE" = "wayland" ]; then wl-copy; else xclip -selection clipboard; fi

$ venv: fd --full-path --unrestricted '.*/bin/activate$' `git rev-parse --show-toplevel`/.. --exec realpath --relative-to=.
# activate venv
source <venv>

# clear in-memory history of local tab
history -c

# reset in-memory history of local tab to stored history
history -r

# Write shell history from memory to disk by appending
history -a

# print files without newline at the end
find . -type f -print0 | xargs -0 -L1 bash -c 'test "$(tail -c 1 "$0")" && echo "No new line at end of $0"'

# send HEAD request and only print status code
curl -ILs -o /dev/null -w "%{http_code}" <url>

$ test_name: pytest --setup-plan | rg --invert-match "(^\s*(SETUP|TEARDOWN))|^[^ \t]|(^$)" | sed 's/^\s*\(.*\) (fixtures used: .*)$/\1/'
# Run python test without capturing output and printing logging messages
pytest -s --log-cli-level=DEBUG <test_name>

$ service: systemctl --failed | head -n -6 | tail -n +2 | sed 's/‚óè \([^ ]*\) .*/\1/' | sed 's/\\x\([0-9a-fA-F]\{2\}\)/\\\\x\1/g'
# Restart failed service
sudo systemctl reset-failed <service>

# remove encryption/password from a pdf file.
pdftk "<pdf_file>" input_pw "<password>" output "<pdf_file>_unencrypted.pdf"

# ocr a pdf file
ocrmypdf -l deu+eng "<pdf_file>" "<pdf_file>-ocr.pdf"

# remove audio track from video
ffmpeg -i "<file>" -vcodec copy -an "<output>"

$ http_url : --- --map "sed 's-^webdav-http-'"
$ mount_point : fd --type directory
# mount webdav folder
sudo mount -t davfs <http_url> <mount_point>

# merge audio from file 2 with video from file 1
ffmpeg -i "<file>" -i "<file1>" -c:v copy -c:a copy output.webm

# check progress of long running mv
watch 'echo "Remaining: $(find <src> -type f | wc -l)/$(du -sh <src> | sed s/\\s.*//g), Done: $(find -type f | wc -l)/$(du -sh . | sed s/\\s.*//g), Device: $(df -h . | tail -n 1)"; echo; ls <src>'

$ needle

# recursively search pdf texts
fd -e pdf --exec sh -c 'pdftotext "{}" - | rg --color always "<needle>" | while read line; do echo "{}: $line"; done' \;

$ image: ls *.img

# Mount file system image to loopback device for mounting
sudo losetup --partscan --show --find <image>

% Commands - git

$ file: fd --hidden --type file

$ old_branch_name: git branch --- --map "cut -b 3-"
# Rename git branch
git branch -m <old_branch_name> <new_branch_name>

$ repository_url: if [ "$XDG_SESSION_TYPE" = "wayland" ]; then wl-paste; else xclip -selection clipboard -o; fi --- --map "sed 's-^https://--'" --fzf-overrides "--no-select-1"
# clone a repository via personal access token (PAT)
git clone "https://<personal_access_token>:x-oauth-basic@<repository_url>"

# print file at specific git revision
git show <revision>:<file>

$ old_path: fd --hidden --type file | sed 's-^-./-'
$ new_path: fd --hidden --type file | sed 's-^-./-'
$ old_branch: git branch --- --map "cut -b 3-"
$ new_branch: git branch --- --map "cut -b 3-"
# diff renamed file that's not showing up as renamed in gui. The path "path/to/file" is absolute from repo root. The path "./path/to/file" relative from working dir.
git diff <old_branch>:<old_path> <new_branch>:<new_path>

$ remote: git remote
# push current branch to remote and keep same name as local branch, also track the branch
git push --set-upstream <remote> HEAD

# compare changes after rebase (similar to my custom rb diff?)
git range-diff @{u} @{1} @

# show git web interface for repository
git instaweb --local --httpd 'python -m http'

# show diff/content of git stash
git stash show -p

# list commits with detailed previews
git log --oneline <revision_range> | fzf --preview 'git show --color=always $(cut -d " "  -f1 <<< {})' --preview-window down:85%

# show diff with detailed previews
(REVISION_RANGE=<revision_range>; git diff $REVISION_RANGE --raw | sed 's/.*\t//' | fzf --preview "git diff $REVISION_RANGE --color=always -- {}" --preview-window down:85%)

% Commands - Rust

# update all cargo crates currently installed
cargo install-update -a

$test_executable: CARGO_PROFILE_RELEASE_DEBUG=true cargo test --release --no-run --message-format=json 2> /dev/null | jq 'select(.reason == "compiler-artifact") .executable | select(. != null)'
$test_name: <test_executable> --list --format=terse 2> /dev/null | sed 's/: test$//'

# run flamegraph for some unit test
flamegraph "<test_executable>" -- "<test_name>"

# run clippy with ALL lints enabled
cargo clippy -- -W clippy::pedantic -W clippy::nursery -W clippy::cargo

% Uninstalled commands

# change logitech keyboard settings via GUI
piper

# change logitech keyboard settings via CLI
ratbagctl

# increase img size of QEMU VM

sudo qemu-img resize win10-2.qcow2 +20G
% Programs I forget the name of

$ file: fd --type f

# find duplicate files in the current working directory and its descendants
fclones group .

# remove a file
rip "<file>"

# terminal image viewer
viu "<file>"

# show disk usage statistics, like baobab or dust
filelight

# convert file with ffmpeg
ffmpeg -i "<file>" "<output>"

# list mp3 file metadata
id3v2 -l "<file>"

# print system info
inxi

# print extended file attributes, e.g. tag
getfattr -d "<file>"

# Show all packages in the current system and home manager generation
nix-tree

# Temporarily open firewall ports
nix run nixpkgs#nixos-firewall-tool

# Run Github CI job locally
nix run nixpkgs-unstable#act -- --help

# zri but for running inside the current nix-shell
zellij run --name "<command>" --in-place -- nix-shell --run '<command>'

# Compare images or videos side-by-side visually
identity

# Measure read and write performance of storage devices, e.g. SSD, with fio. Must be installed to work
kdiskmark

name: "Update custom packages"

# inspired by https://github.com/dee0sap/ocm/blob/7f814d567f7d0cece733e2e142c57a6adf96459b/.github/workflows/flake_vendorhash.yaml

on:
  schedule:
    - cron: "50 2 * * 6"
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
          pkg:
          - "cura5"
          - "koi"
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
      - name: Install dependencies
        run: nix-env -i git-crypt -f '<nixpkgs>'
      - name: Detect new version
        id: detect-new-version
        run: |
          HAS_VERSION_CHECKER="$(nix eval .#packages --impure --apply 'pkgs:
            let
              lib = (import <nixpkgs> {}).lib;
              pkg = pkgs.${builtins.currentSystem}.${{ matrix.pkg }};
            in
              lib.attrsets.hasAttrByPath [ "passthru" "custom" "newVersionCheck"] pkg
          ')";
          if [ "$HAS_VERSION_CHECKER" = 'true' ]; then
            CURRENT_SYSTEM="$(nix eval --impure --expr 'builtins.currentSystem')"
            SCRIPT="$(nix build .#packages.${CURRENT_SYSTEM}.${{ matrix.pkg }}.passthru.custom.newVersionCheck --print-out-paths)"
            echo "NEW_VERSION=$($SCRIPT)" >> "$GITHUB_ENV"
          else
            echo "NEW_VERSION=stable" >> "$GITHUB_ENV"
          fi
      - name: Apply version update
        id: apply-version-update
        run: |
          nix run github:ede1998/nix-update#nix-update -- \
            --write-commit-message "commit.txt" \
            --file ./pkgs/impure.nix \
            --version ${NEW_VERSION} \
            ${{ matrix.pkg }}
          {
            echo "COMMIT_MSG<<EOF"
            OLD_VERSION="$( sed -n 's/.*: \(.*\) -> .*/\1/;1p' < commit.txt )"
            sed '1s/\([^:]*\): \(.*\)/chore(\1): \2/;'"s-/None\.\.\.-/${OLD_VERSION}...-" < commit.txt
            echo EOF
          } >> "$GITHUB_OUTPUT";
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT";
      - name: Check diff
        id: check-diff
        run: |
          diff=$(git diff -- pkgs/${{ matrix.pkg }})
          if [[ -z "$diff" ]]; then
            echo "No package updated."
            exit 0
          fi

          cat << EOF >> "${GITHUB_STEP_SUMMARY}"
          \`\`\`diff
          ${diff}
          \`\`\`
          EOF

          {
            echo 'body<<EOF'
            echo '```diff'
            echo "$diff"
            echo '```'
            echo EOF
          } >> "$GITHUB_OUTPUT"
      - name: Create pull request
        id: create_pull_request
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: ${{ steps.apply-version-update.outputs.COMMIT_MSG }}
          title: Update ${{ matrix.pkg }} to ${{ steps.apply-version-update.outputs.NEW_VERSION }}
          body: |
            This PR was automatically created by CI job [update-custom-pkgs.yml](${{ github.server_url }}/${{ github.repository }}/blob/${{ github.ref }}/.github/workflows/update-custom-pkgs.yml).
            Run the updated program directly from the PR for testing:

            ```bash
            nix run github:ede1998/nix-config/update-${{ matrix.pkg }}#${{ matrix.pkg }}
            ```

            Diff:

            ${{ steps.check-diff.outputs.body }}
          branch: update-${{ matrix.pkg }}
          committer: Flake Bot <actions@github.com>
          assignees: ede1998
          author: Flake Bot <actions@github.com>
          add-paths: |
            pkgs/${{ matrix.pkg }}
      #- name: Enable pull request auto merge
      #  if: ${{ steps.create_pull_request.outputs.pull-request-number }}
      #  uses: peter-evans/enable-pull-request-automerge@v3
      #  with:
      #    token: ${{ steps.generate_token.outputs.token }}
      #    pull-request-number: ${{ steps.create_pull_request.outputs.pull-request-number }}
      #    merge-method: squash
